knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("tidyr")
data()
data(chickwts)
force(chickwts)
View(chickwts)
str(chickwts)
View(chickwts)
View(chickwts)
str(chickwts)
summary(chickwts)
str(chickwt)
str(chickwts)
data(chickwts)
data(chickwts)
chickwts
data(chickwts)
force(chickwts)
str(chickwts)
# your code here
columns(chickwts)
# your code here
glimpse(chickwts)
types(chickwts)
my_variable <- 10
#my_varıable
my_variable <- 10
my_varıable
help(chickwts)
# your code here
count(chickwts['feed'])
# your code here
categories = unique(chickwts['feed'])
length(categories)
# your code here
categories = levels(chickwts['feed'])
length(categories)
# your code here
categories <- unique(chickwts['feed'])
length(categories)
# your code here
categories <- unique(chickwts$feed)
length(categories)
View(chickwts)
summary(chickwts)
summary(chickwts)
match(max(chickwts['weight']),chickwts['weight'])
summary(chickwts)
match(max(chickwts['weight']),chickwts$weight)
#First show the summary to get an idea of the data
summary(chickwts)
#Find the index of the max weight
index <- match(max(chickwts['weight']),chickwts$weight)
#Find the corresponding feed for the maximum weight
chickwts$weight[index]
#First show the summary to get an idea of the data
summary(chickwts)
#Find the index of the max weight
index <- match(max(chickwts['weight']),chickwts$weight)
#Find the corresponding feed for the maximum weight
chickwts$feed[index]
#First show the summary to get an idea of the data
summary(chickwts)
#Find the index of the max weight
index <- match(max(chickwts['weight']),chickwts$weight)
index
#Find the corresponding feed for the maximum weight
chickwts$feed[index]
for (cat in categories) {
#Get a subset based on the category
sub <- subset(chickwts, feed==cat)
sub
}
View(sub)
View(sub)
# Make an object to store the maximum mean weight across the categories
max_mean <- 0
for (cat in categories) {
#Get a subset based on the category
sub <- subset(chickwts, feed==cat)
sub
#find the mean of the subset's weight
cat_mean <- mean(sub$weight)
cat_mean
#If the mean is greater than the current max mean, overwrite the max mean
if (cat_mean > max_mean) {
max_mean <- cat_mean
#Also store the category of the max mean
max_cat <- cat
}
}
max_mean
max_cat
ggplot(chickwts, mapping = feed)
ggplot(chickwts, mapping = chickwts$feed)
ggplot(chickwts, mapping = aes(chickwts$feed))
ggplot(chickwts, mapping = aes(feed))
ggplot(chickwts$weight, mapping = aes(feed))
ggplot(weight, mapping = aes(feed))
ggplot(chickwts['weight'], mapping = aes(feed))
ggplot(
data = chickwts,
mapping = aes(feed)
)
ggplot(
data = chickwts,
mapping = aes(feed)
) + geom_point()
ggplot(
data = chickwts,
mapping = aes(feed)
) + geom_point(feed)
ggplot(
data = chickwts,
mapping = aes(feed)
) + geom_point(chickwts$feed)
ggplot(
data = chickwts,
mapping = aes(x = feed, y = weight)
) + geom_point()
ggplot(
data = chickwts,
mapping = aes(x = feed, y = weight)
) + geom_boxplot()
ggplot(
data = chickwts,
mapping = aes(x = feed, y = weight, color = feed)
) + geom_boxplot()
ggplot(
data = chickwts,
mapping = aes(x = feed, y = weight, color = feed)
) + geom_violin()
#Exercise 5:
str(penguins)
#Exercise 5:
data(ggplot(penguins))
str(penguins)
install.packages("palmerpenguins")
#Exercise 5:
library(palmerpenguins)
str(penguins)
#Load the data for exercise 5:
library(palmerpenguins)
#Take a look at the data
summary(penguins)
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species)
) + geom_point()
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species)
) + geom_point() + facet_wrap(~island)
#Scatter plot of bill length vs bill depth, color coded by species
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species)
) + geom_point()
#Scatter plot of bill length vs bill depth, color coded by species and faceted by island
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species)
) + geom_point() + facet_wrap(~island)
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species")
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species, labs(color = "Species")
)
) +
geom_point()
libary(toadyverse)
libary(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
libary(tidyverse)
library(tidyverse)
ggplot(data = mpg,
maping = aes(x = displ = hwy)
library(tidyverse)
ggplot(data = mpg,
maping = aes(x = displ, y = hwy)
) +
geom_point() +
geom_smooth(method = "lm")
library(tidyverse)
str(tidyverse)
library(tidyverse)
str(mpg)
ggplot(data = mpg,
maping = aes(x = displ, y = hwy)
) +
geom_point() +
geom_smooth(method = "lm")
library(tidyverse)
str(mpg)
ggplot(data = mpg,
maping = aes(x = displ, y = hwy)
) +
geom_point() +
geom_smooth(method = "lm")
ggplot(
data = mpg,
maping = aes(x = displ, y = hwy)
) +
geom_point() +
geom_smooth(method = "lm")
ggplot(
data = mpg,
mapping = aes(x = displ, y = hwy)
) +
geom_point() +
geom_smooth(method = "lm")
head(midwest)
view(midwest)
percbelowpoverty
ggplot(
data = midwest,
mapping = aes(x = perchsd, y percbelowpoverty)
ggplot(
data = midwest,
mapping = aes(x = perchsd, y = percbelowpoverty)
) +
geom_point()
ggplot(
data = midwest,
mapping = aes(x = perchsd, y = percbelowpoverty)
) +
geom_point() +
geom_smooth(method = "lm")
#Plot percbelowpoverty against perchsd
ggplot(
data = midwest,
mapping = aes(x = perchsd, y = percbelowpoverty)
) +
geom_point() +
geom_smooth(method = "lm")
#Plot percbelowpoverty against percollege
ggplot(
data = midwest,
mapping = aes(x = percollege, y = percbelowpoverty)
) +
geom_point() +
geom_smooth(method = "lm")
#Plot percbelowpoverty against percprof
ggplot(
data = midwest,
mapping = aes(x = percprof, y = percbelowpoverty)
) +
geom_point() +
geom_smooth(method = "lm")
