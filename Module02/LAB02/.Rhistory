knitr::opts_chunk$set(echo = TRUE)
df |>
arrange(y)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df <- as.tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
library(ggplot2)
head(flights, 25)
flights|>
filter(arr_delay >= 120)
flights|>
filter(dest == "IAH" | dest == "HOU")
flights|>
filter(carrier == "UA" | carrier == "AA" | carrier == "DL")
flights|>
filter(month == 7 | month == 8 | month == 9)
flights|>
filter(arr_delay >= 120 & dep_delay <= 0)
flights|>
filter(dep_delay >= 60 & arr_delay <= dep_delay-30)
#Longest departure delays
longest_dep_delay_df <- flights |>
arrange(desc(dep_delay))
head(longest_dep_delay_df, 10)
#Earliest in the morning
earliest <- flights |>
arrange(dep_time)
head(earliest, 10)
#Arrange the flights by the arrival time minus the departure time.
fastest <- flights |>
arrange(arr_time-dep_time)
head(fastest, 10)
# Note: I left the entire walk through of the process in this code block.
# This is in no way optimized, I just wanted to keep track of the process to come
# to my conclusion. Also, I am sure I made this far more complicated than I needed
# to, and I am willing to bet I misunderstood the question or there is a nice, clean
# function in the R standard library that does all of this for me. But, this was
# a fun exercise and I learned a lot doing it.
# Remove NA's and NULL's
non_na_flights <- flights |>
filter(!is.na(dep_time) & !is.na(arr_time) & !is.null(dep_time) & !is.null(arr_time))
# Sort the departure time by descending
desc_dep_time <- non_na_flights |>
arrange(desc(dep_time))
# Get the number of rows in desc_dep_time
#print(nrow(desc_dep_time))
# Loop through the data frame and perform the subtraction.
# Append the subtracted items to a new list
# Also, append the raw data to it's own list to verify the subtraction
flight_time <- list()
data <- list()
for (i in 1:nrow(desc_dep_time)) {
flight_time[[i]] <- desc_dep_time$arr_time[i] - desc_dep_time$dep_time[i]
data[[i]] <- c(desc_dep_time$arr_time[i],desc_dep_time$dep_time[i])
}
# The for loop, below, was used for debugging an error when correcting the flight
# time, below.
# for (i in which(is.na(flight_time))) {
#   print(paste(desc_dep_time$arr_time[i], desc_dep_time$dep_time[i],flight_time[[i]]))
# }
# Verify the output
print("Original data,  Calculated Flight Time")
paste(data[c(1:100)], flight_time[c(1:100)])
# Newline print source: https://www.geeksforgeeks.org/r-program-to-print-a-new-line-in-string/#
cat("\n\n")
# Correct the negative flight times. This can be done by adding the departure
# time to the result
corrected_flight_time <- list()
for (i in 1:nrow(desc_dep_time)) {
if (flight_time[[i]] <= 0 & !is.na(flight_time[[i]])) {
corrected_flight_time[[i]] <- (2400 - desc_dep_time$dep_time[i]) + (desc_dep_time$dep_time[i] + flight_time[[i]])
#print(paste(i,corrected_flight_time[[i]]))
} else if (!is.na(flight_time[[i]])) {
corrected_flight_time[[i]] <- flight_time[[i]]
}
}
paste(corrected_flight_time[c(1:50)])
# Based on index 50 of the result, it is clear the math is incorrect because of
# the departure and arrival time formats (this should be 60, not 100).
# Time to fix it...
# Source for defining functions: https://www.w3schools.com/r/r_functions.asp
convert_time_to_minutes <- function(input_time) {
# String splitting depends on the length of the string
# String splitting resource: https://builtin.com/articles/strsplit
# String length source: https://stackoverflow.com/questions/11134812/how-to-find-the-length-of-a-string-in-r
# Split the departure time string and store it as a total
if (nchar(input_time) == 4){
# Split the string:
hour <- as.integer(paste0(unlist(strsplit(input_time, split = ""))[1:2], collapse = ""))
minute <- as.integer(paste0(unlist(strsplit(input_time, split = ""))[3:4], collapse = ""))
} else if (nchar(input_time) == 3) {
# Split after the first character
hour <- as.integer(paste0(unlist(strsplit(input_time, split = ""))[1], collapse = ""))
minute <- as.integer(paste0(unlist(strsplit(input_time, split = ""))[2:3], collapse = ""))
} else if (nchar(input_time) <= 2) {
hour <- 0
minute <- as.integer(input_time)
}
return (hour * 60 + minute)
}
# Correct the format of the arrival and departure times and store as the total
# number of minutes in the day
flight_time_in_minutes_list <- list()
flight_duration <- list()
for (i in 1:nrow(desc_dep_time)) {
# Convert the departure time to a string:
# https://www.geeksforgeeks.org/convert-an-object-to-a-string-in-r-programming-tostring-function/
dep_time_minutes <- convert_time_to_minutes(toString(desc_dep_time$dep_time[i]))
arr_time_minutes <- convert_time_to_minutes(toString(desc_dep_time$arr_time[i]))
# Compute the flight duration
flight_duration[[i]] <- arr_time_minutes - dep_time_minutes
# correct the negative flight durations
if (flight_duration[[i]] < 0){
flight_time_in_minutes_list[[i]] <- ((60*24) - dep_time_minutes) + arr_time_minutes
} else {
flight_time_in_minutes_list[[i]] <- flight_duration[[i]]
}
}
print("Corrected negative flight times in minutes:")
paste(flight_time_in_minutes_list[c(1:100)])
cat("\n\n")
# Based on the output above, the math is now correct for negative flight times.
# Check the output for non-negative flight times
print("Corrected non-negative flight times in minutes:")
paste(head(data[c(which(flight_duration > 0))],50), head(flight_time_in_minutes_list[c(which(flight_duration > 0))],50))
cat("\n\n")
# This now seems to be outputting the data correctly... time to sort the original
# data set by the indices of corrected flight duration
# The easiest way to go about this is to add the list as a column to the data
# frame, then call the arrange() function on the column.
# Source for adding list as column: https://www.geeksforgeeks.org/insert-list-as-dataframe-column-in-r/
desc_dep_time <- add_column(desc_dep_time, flight_duration = unlist(flight_time_in_minutes_list))
head(desc_dep_time, 100)
# Now sort desc_dep_time by flight duration
desc_dep_time <- desc_dep_time|>
arrange(flight_duration)
head(desc_dep_time, 100)
tail(desc_dep_time, 100)
# First, filter by year, add a YYYY-MM-DD column, and get distinct dates
filtered_by_year <- flights |>
filter(year == 2013) |>
mutate(date = as.Date(paste(year, month, day, sep="-"))) |>
distinct(date)
# Source for creating a date sequence: https://stackoverflow.com/questions/25677035/how-to-create-a-range-of-dates-in-r
# Generate the date range
dates <- seq(as.Date("2013-01-01"), by = "day", length.out = 365)
# Loop through filtered dates and see if any were missed
no_fly_count <- 0
fly_count <- 0
for (i in dates){
if (length(which(filtered_by_year$date==i)) == 0){
paste("There were zero flights on ",filtered_by_year)
no_fly_count <- no_fly_count + 1
} else {
fly_count <- fly_count + 1
}
}
cat("Days with flights: ", fly_count, "\tDays without flights: ", no_fly_count)
flight_distance <- flights |>
arrange(distance) |>
distinct(flight)
shortest <- head(flight_distance, 10)
longest <- tail(flight_distance, 10)
new_df <- as.data.frame(shortest$flight, longest$flight)
new_df
cat("Farthest Flights:\tShortest Flights:\n")
for (i in 1:10) {
cat(longest$flight[[i]],"\t\t\t",shortest$flight[[i]],"\n")
}
head(flights,10)
flights
selected1 <- flights |>
select(dep_time, dep_delay, arr_time, arr_delay)
selected1
selected2 <- flights |>
select(starts_with("arr"), starts_with("dep"))
selected2
char_vec <- c("dep_time", "dep_delay", "arr_time", "arr_delay")
selected3 <- flights |>
select(all_of(char_vec))
selected3
selected4 <- flights |>
select(any_of(char_vec))
selected4
selected5 <- flights |>
select(!year:day, !sched_dep_time, !sched_arr_time, !carrier:time_hour)
selected <- flights |>
select(dep_time, dep_time, dep_time, dep_time)
selected
flights |> select(contains("TIME"))
flights |> select(contains("TIME", ignore.case = FALSE))
renamed <- flights |>
rename(air_time_min = air_time ) |>
relocate(air_time_min)
renamed
carriers <- flights |>
group_by(carrier) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) |>
mutate(sum_of_avg_delay = avg_dep_delay + avg_arr_delay) |>
arrange(sum_of_avg_delay)
tail(carriers,3)
# As a means to better understand the group_by function, first group by each
# of the variables independently
challenge1 <- flights |>
group_by(carrier) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
)|>
mutate(sum_of_avg_delay = avg_dep_delay + avg_arr_delay) |>
arrange(desc(sum_of_avg_delay))
challenge1
challenge2 <- flights |>
group_by(origin) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
)|>
mutate(sum_of_avg_delay = avg_dep_delay + avg_arr_delay) |>
arrange(desc(sum_of_avg_delay))
challenge2
challenge3 <- flights |>
group_by(dest) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
)|>
mutate(sum_of_avg_delay = avg_dep_delay + avg_arr_delay) |>
arrange(desc(sum_of_avg_delay))
challenge3
challenge <- flights |>
group_by(carrier, origin, dest) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
)|>
mutate(sum_of_avg_delay = avg_dep_delay + avg_arr_delay) |>
arrange(desc(sum_of_avg_delay))
challenge
flight_delays <- flights |>
group_by(flight, dest) |>
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
arrange(desc(avg_dep_delay))
flight_delays
# Create a function to take in a year, day, and month and return a filtered,
# summarized dataframe
grouped_data <- function() {
temp_df <- flights |>
# Source for extracting the time from POSIXct data type: https://stackoverflow.com/questions/9839343/extracting-time-from-posixct
mutate(
parsed_time = strftime(time_hour, format="%H:%M:%S")
) |>
# Group by time_hour, as this can be create the x axis over the course
# of the day
group_by(parsed_time) |>
# Remove all NA values
filter(!is.na(arr_delay) & !is.na(dep_delay)) |>
# Then summarize the average arrival and departure delays across each timestamp
summarize(
avg_arr_delay = mean(arr_delay, na.rm=TRUE),
avg_dep_delay = mean(dep_delay, na.rm=TRUE)
)
return (temp_df)
}
# Let the function, above, process the data for the sake of making this neat
df <- grouped_data()
df
# plot a line graph over the course of the day for arrival and departure delays
ggplot(
data = df,
mapping = aes(x=parsed_time, y=avg_arr_delay)
) + geom_point()
ggplot(
data = df,
mapping = aes(x=parsed_time, y=avg_dep_delay)
) + geom_point()
# Test each slice function with n=1
flights |> slice_head(n = 1)
flights |> slice_tail(n = 1)
flights |> slice_min(arr_delay, n = 1)
flights |> slice_max(arr_delay, n = 1)
flights |> slice_sample(n = 1)
# Test each slice function with n=-1
flights |> slice_head(n = -1)
flights |> slice_tail(n = -1)
flights |> slice_min(arr_delay, n = -1)
flights |> slice_max(arr_delay, n = -1)
flights |> slice_sample(n = -1)
understanding_count <- flights |>
group_by(time_hour) |>
count(time_hour)
understanding_count
understanding_count <- flights |>
summarize(
max_time_hour = max(time_hour)
) |>
count(max_time_hour)
understanding_count
understanding_count <- flights |>
count(time_hour) |>
summarize(
avg_n = mean(n)
)
understanding_count
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df1 <- df |>
group_by(y)
df1
df2 <- df |>
arrange(y)
df2
df3 <- df |>
group_by(y) |>
summarize(mean_x = mean(x))
df3
df4 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df4
?summarize
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "keep")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "keep")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "keep")
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df5
df5 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df5
df6 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df6 <- df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df6
df7 <- df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
df7
library(readr)
carprice <- read_csv("carprice.csv")
View(carprice)
library(readr)
carprice <- read_csv("carprice.csv")
str(carprice)
summary(carprice)
str(carprice)
variable.names(carprice)
nrows(carprice)
variable.names(carprice)
nrow(carprice)
ncol(carprice)
ggplot(
data = carprice,
mapping = aes(x = MPG.highway)
) +
geom_histogram()
ggplot(
data = carprice,
mapping = aes(x = MPG.highway)
) +
geom_histogram()
ggplot(
data = carprice,
mapping = aes(x = Price)
) +
geom_histogram()
