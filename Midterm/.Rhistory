#False
ifelse(
#condition
Variable==variables[3],
#True
((max_list[3]-Value)/max_list[3]),
#False
((max_list[4]-Value)/max_list[4])
)
)
)
)
#There was a lot of conditional calculation there...
#verify this did what I want
penguins_long_sex_species_normalized
#plot the violin plot
ggplot(
data=penguins_long_sex_species_normalized,
mapping=aes(x=species_sex, y=normalized_value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
head(pulitzer)
length(unique(pulitzer$newspaper))
hist(pulitzer$pctchg_circ)
#determine how correlated the two values are, then get a range over the x axis values
correlation <- cor(pulitzer$num_finals1990_2003, pulitzer$pctchg_circ)
x_range <- seq(min(pulitzer$num_finals1990_2003),max(pulitzer$num_finals1990_2003))
#Filter ctchg_circ when num_finals1990_2003=0 so we can then find the y intercept of the correlation line
x_0 <- pulitzer |>
filter(num_finals1990_2003==0)
#determine a scaling factor for the correlation based on the standard deviation of the y data
scale_factor <- 0.1*sd(pulitzer$pctchg_circ)
#Create a data frame with the x and y correlation data
correlation_data <- data.frame(x_cor=x_range, y_cor=(correlation*x_range*scale_factor)+mean(x_0$pctchg_circ))
correlation_data
#plot the scatter plot with the correlation overlayed on top
ggplot(
data=pulitzer,
mapping=aes(x=num_finals1990_2003, y=pctchg_circ)
) +
geom_point() +
geom_line(
data = correlation_data,
mapping=aes(x=x_cor, y=y_cor)
)
#determine how correlated the two values are, then get a range over the x axis values
correlation <- cor(pulitzer$num_finals2004_2014, pulitzer$circ2004)
correlation
x_range <- seq(min(pulitzer$num_finals2004_2014),max(pulitzer$num_finals2004_2014))
#Filter ctchg_circ when num_finals2004_2014=0 so we can then find the y intercept of the correlation line
x_0 <- pulitzer |>
filter(num_finals2004_2014==0)
#determine a scaling factor for the correlation based on the standard deviation of the y data
scale_factor <- 0.1*sd(pulitzer$circ2004)
#Create a data frame with the x and y correlation data
correlation_data <- data.frame(x_cor=x_range, y_cor=(correlation*x_range*scale_factor)+mean(x_0$circ2004))
correlation_data
#plot the scatter plot with the correlation overlayed on top
ggplot(
data=pulitzer,
mapping=aes(x=num_finals2004_2014, y=circ2004)
) +
geom_point() +
geom_line(
data = correlation_data,
mapping=aes(x=x_cor, y=y_cor)
)
ggpairs(pulitzer, cardinality_threshold = length(unique(pulitzer$newspaper)))
#Remove newspaper from the selected columns
pulitzer_minus_np <- pulitzer |>
select(!newspaper)
#Perform ggpairs with some reformatting
ggpairs(pulitzer_minus_np) + theme(
strip.text.x = element_text(size = 6),
strip.text.y = element_text(size = 6),
axis.text = element_text(size = 8),
axis.text.x = element_text(angle = 90)
)
x<-seq(0,10,0.1)
ypdf=dexp(x, rate=0.5)
plot(x, ypdf)
ycdf=pexp(x,0.5)
plot(x,ycdf)
grid()
mean(ycdf)
sd(ycdf)
1-pexp(2,0.5)
x=seq(0,10,0.1)
upper <- pexp(3,0.5)
lower <- pexp(1,0.5)
upper-lower
x=seq(0,10000,10)
ypdf=dlnorm(x, mean = 7, sd = 1)
plot(x, ypdf)
x=seq(0,10000,10)
ycdf=plnorm(x, mean = 7, sd = 1)
plot(x, ycdf)
grid()
mean(ycdf)
sd(ycdf)
max(ypdf)
plnorm(500, mean = 7, sd = 1)
x=seq(0,10000,10)
upper <- plnorm(1500, mean = 7, sd = 1)
lower <- plnorm(200, mean = 7, sd = 1)
#I am doing this to omit the portion of the distribution in the range 200:1500
1-(upper-lower)
penguins_filtered <- penguins |>
filter(sex="male")
penguins_filtered <- penguins |>
filter(sex=="male")
head(penguins_filtered)
penguins_long <- penguins_filtered |>
select(!year, !sex) |>
pivot_longer(!species & !island, names_to="Variable", values_to="Value")
penguins_long <- penguins_filtered |>
select(!year) |>
pivot_longer(!species & !island, names_to="Variable", values_to="Value")
penguins_long <- penguins_filtered |>
select(!sex) |>
pivot_longer(!species & !island, names_to="Variable", values_to="Value")
head(penguins_long)
penguins_long <- penguins_filtered |>
select(!sex, !year) |>
pivot_longer(!species & !island, names_to="Variable", values_to="Value")
penguins_long <- penguins_filtered |>
select(!sex & !year) |>
pivot_longer(!species & !island, names_to="Variable", values_to="Value")
head(penguins_long)
ggplot(
data=penguins_long,
mapping=aes(x=island, y=log(Value), fill=Variable)
) + geom_boxplot()
#create a column that combines sex and species
penguins_long_sex_species <- penguins_long |>
mutate(species_sex=as.factor(paste0(species, " ", sex)), .before=island) |>
select(!species & !sex) |>
filter(!is.na(Value))
#create a column that combines sex and species
penguins_long_species_island <- penguins_long |>
mutate(species_island=as.factor(paste0(species, " ", island)), .before=Variable) |>
select(!species & !island) |>
#filter(!is.na(Value))
#verify this did what I want
head(penguins_long_sex_species)
#create a column that combines sex and species
penguins_long_species_island <- penguins_long |>
mutate(species_island=as.factor(paste0(species, " ", island)), .before=Variable) |>
select(!species & !island) |>
filter(!is.na(Value))
#verify this did what I want
head(penguins_long_sex_species)
#plot the violin plot
ggplot(
data=penguins_long_sex_species,
mapping=aes(x=species_sex, y=Value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
#create a column that combines sex and species
penguins_long_species_island <- penguins_long |>
mutate(species_island=as.factor(paste0(species, " ", island)), .before=Variable) |>
select(!species & !island) |>
filter(!is.na(Value))
#verify this did what I want
head(penguins_long_species_island)
#plot the violin plot
ggplot(
data=penguins_long_sex_species,
mapping=aes(x=species_sex, y=Value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
#Find the max value of each variable to normalize against
variables <- as.vector(unique(penguins_long_species_island$Variable))
max_list <- vector()
#store all max values to a vector
for (i in 1:length(variables)) {
filtered_df <- penguins_long_species_island |>
filter(Variable==variables[i])
max_list[i] <- max(filtered_df$Value)
}
#check that the values have been captured
max_list
#Create a column that conditionally normalizes the data
penguins_long_species_island_normalized <- penguins_long_species_island |>
mutate(normalized_value=ifelse(
#condition
Variable==variables[1],
#True
((max_list[1]-Value)/max_list[1]),
#False
ifelse(
#condition
Variable==variables[2],
#True
((max_list[2]-Value)/max_list[2]),
#False
ifelse(
#condition
Variable==variables[3],
#True
((max_list[3]-Value)/max_list[3]),
#False
((max_list[4]-Value)/max_list[4])
)
)
)
)
#There was a lot of conditional calculation there...
#verify this did what I want
penguins_long_species_island_normalized
#plot the violin plot
ggplot(
data=penguins_long_species_island_normalized,
mapping=aes(x=species_sex, y=normalized_value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
#Find the max value of each variable to normalize against
variables <- as.vector(unique(penguins_long_species_island$Variable))
max_list <- vector()
#store all max values to a vector
for (i in 1:length(variables)) {
filtered_df <- penguins_long_species_island |>
filter(Variable==variables[i])
max_list[i] <- max(filtered_df$Value)
}
#check that the values have been captured
max_list
#Create a column that conditionally normalizes the data
penguins_long_species_island_normalized <- penguins_long_species_island |>
mutate(normalized_value=ifelse(
#condition
Variable==variables[1],
#True
((max_list[1]-Value)/max_list[1]),
#False
ifelse(
#condition
Variable==variables[2],
#True
((max_list[2]-Value)/max_list[2]),
#False
ifelse(
#condition
Variable==variables[3],
#True
((max_list[3]-Value)/max_list[3]),
#False
((max_list[4]-Value)/max_list[4])
)
)
)
)
#There was a lot of conditional calculation there...
#verify this did what I want
penguins_long_species_island_normalized
#plot the violin plot
ggplot(
data=penguins_long_species_island_normalized,
mapping=aes(x=species_island, y=normalized_value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(budget)/(intgross+domgross), .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi_2013=(budget_2013)/(intgross_2013+domgross_2013), .after = intgross_2013)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(budget)/(intgross+domgross), .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi_2013=(intgross_2013+domgross_2013)/(budget_2013), .after = intgross_2013)
head(bechdel)
best_movie <- max(bechdel$kpi_2013)
best_movie <- max(bechdel$kpi_2013)
best_movie
bechdel <- bechdel |>
filter(!is.na)|>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
best_movie_2013 <- bechdel |>
arrange(desc(kpi_2013))
head(best_movie_2013, 1)
best_movie <- bechdel |>
arrange(desc(kpi))
head(best_movie, 1)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi_2013=(intgross_2013+domgross_2013)/(budget_2013), .after = intgross_2013)
head(bechdel)
best_movie_2013 <- bechdel |>
arrange(desc(kpi_2013))
head(best_movie_2013, 1)
best_movie <- bechdel |>
arrange(desc(kpi))
head(best_movie, 1)
plot(bechdel$year, bechdel$kpi)
plot(bechdel$year, bechdel$kpi_2013)
bechdel <- bechdel |>
filter(year==2013)
plot(bechdel$year, bechdel$kpi_2013)
plot(bechdel$year, bechdel$kpi_2013)
knitr::opts_chunk$set(echo = TRUE)
library("fivethirtyeight")
library("tidyverse")
library("dplyr")
head(airline_safety)
length(unique(airline_safety$airline))
airlines <- airline_safety |>
group_by(airline) |>
arrange(desc(incidents_85_99))
head(airlines, 5)
airlines <- airline_safety |>
group_by(airline) |>
arrange(desc(incidents_00_14))
head(airlines, 5)
#create a plot
ggplot(airline_safety,aes(x=incidents_85_99,y=incidents_00_14))+geom_point()
incidents <- airline_safety |>
select(incidents_85_99, incidents_00_14)
incidents
library('GGally')
ggpairs(incidents)
incidents_per_flight_volume <- airline_safety |>
mutate(incidents_per_flight_volume_85_99=(incidents_85_99/avail_seat_km_per_week)) |>
mutate(incidents_per_flight_volume_00_14=(incidents_00_14/avail_seat_km_per_week))
incidents_per_flight_volume
incident_correlation <- incidents_per_flight_volume |>
select(incidents_per_flight_volume_85_99, incidents_per_flight_volume_00_14)
ggpairs(incident_correlation)
top_5 <- airline_safety |>
group_by(airline) |>
arrange(desc(avail_seat_km_per_week))
head(top_5, 5)
bottom_5 <- airline_safety |>
group_by(airline) |>
arrange(avail_seat_km_per_week)
head(bottom_5, 5)
head(comma_survey)
length(unique(comma_survey$more_grammar_correct))
comma_survey <- comma_survey |>
mutate(more_grammar_correct_as_factor=as.factor(comma_survey$more_grammar_correct))
#There are plenty of ways to do this, but I wanted to learn more about string parsing in R, so I chose to do it this way
oxford_parsing <- comma_survey |>
mutate(oxford_comma_parse = ifelse(lengths(regmatches(more_grammar_correct, gregexpr(",", more_grammar_correct)))<2, FALSE, TRUE), .after = more_grammar_correct)
oxford_parsing
#another cool way to do this would be to evaluate the length of the string, since the oxford comma string will always be longer, in this case
oxford_str_len <- comma_survey |>
mutate(oxford_comma_str = ifelse(nchar(more_grammar_correct)<max(nchar(more_grammar_correct)), FALSE, TRUE), .after = more_grammar_correct)
oxford_str_len
#lastly, the least elegant way to do this (in my opinion) is to check for a complete match against the more_grammar_correct variable
oxford_complete_match <- comma_survey |>
mutate(oxford_comma_match=ifelse(more_grammar_correct_as_factor=="It's important for a person to be honest, kind and loyal.", FALSE, TRUE), .after = more_grammar_correct)
oxford_complete_match
factorized_comma_survey <- comma_survey |>
mutate_if(is.character, as.factor)
factorized_comma_survey
#test NA as factor
test <- factorized_comma_survey |>
group_by(gender)
test
heard_by_gender <- factorized_comma_survey |>
group_by(gender) |>
summarize(
heard_count = sum(heard_oxford_comma==TRUE, na.rm=TRUE),
not_heard_count = sum(heard_oxford_comma==FALSE, na.rm=TRUE)
)
heard_by_gender
preferred_by_gender <- oxford_parsing |>
mutate_if(is.character, as.factor) |>
group_by(gender) |>
summarize(
preferred_count = sum(oxford_comma_parse==TRUE, na.rm=TRUE),
not_preferred_count = sum(oxford_comma_parse==FALSE, na.rm=TRUE)
)
preferred_by_gender
heard_by_gender <- factorized_comma_survey |>
group_by(gender, location) |>
summarize(
heard_count = sum(heard_oxford_comma==TRUE, na.rm=TRUE),
not_heard_count = sum(heard_oxford_comma==FALSE, na.rm=TRUE)
)
heard_by_gender
preferred_by_gender <- oxford_parsing |>
mutate_if(is.character, as.factor) |>
group_by(gender,location) |>
summarize(
preferred_count = sum(oxford_comma_parse==TRUE, na.rm=TRUE),
not_preferred_count = sum(oxford_comma_parse==FALSE, na.rm=TRUE)
)
preferred_by_gender
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi_2013=(intgross_2013+domgross_2013)/(budget_2013), .after = intgross_2013)
head(bechdel)
best_movie_2013 <- bechdel |>
arrange(desc(kpi_2013))
head(best_movie_2013, 1)
best_movie <- bechdel |>
arrange(desc(kpi))
head(best_movie, 1)
plot(bechdel$year, bechdel$kpi)
plot(bechdel$year, bechdel$kpi_2013)
plot(bechdel$year, bechdel$kpi_2013)
data("bechdel")
head(bechdel)
bechdel <- bechdel |>
mutate(kpi=(intgross+domgross)/budget, .after = intgross)
head(bechdel)
bechdel <- bechdel |>
mutate(kpi_2013=(intgross_2013+domgross_2013)/(budget_2013), .after = intgross_2013)
head(bechdel)
best_movie_2013 <- bechdel |>
arrange(desc(kpi_2013))
head(best_movie_2013, 1)
best_movie <- bechdel |>
arrange(desc(kpi))
head(best_movie, 1)
plot(bechdel$year, bechdel$kpi)
plot(bechdel$year, bechdel$kpi_2013)
x<-seq(0,1,0.1)
ypdf=dexp(x, rate=0.35)
plot(x, ypdf)
ycdf=pexp(x,0.35)
plot(x,ycdf)
grid()
mean(ycdf)
sd(ycdf)
prob <- pexp(4, rate=0.35)
prob <- pexp(4, rate=0.35)
prob
prob <- pexp(4, rate=0.35)
prob
upper <- pexp(1.7,0.35)
lower <- pexp(1.1,0.35)
upper-lower
x=seq(0,10,0.1)
plot(x, pexp(x, 0.35))
upper <- pexp(1.7,0.35)
lower <- pexp(1.1,0.35)
upper-lower
x=seq(1,2,0.1)
plot(x, pexp(x, 0.35))
upper <- pexp(1.7,0.35)
lower <- pexp(1.1,0.35)
upper-lower
x=seq(1,2,0.05)
plot(x, pexp(x, 0.35))
upper <- pexp(1.7,0.35)
lower <- pexp(1.1,0.35)
upper-lower
x=seq(1,2,0.05)
plot(x, pexp(x, 0.35))
abline(1.1)
x=seq(1,2,0.05)
plot(x, pexp(x, 0.35))
abline(v=1.1)
abline(v=1.7)
upper <- pexp(1.7,0.35)
lower <- pexp(1.1,0.35)
upper-lower
#create a column that combines sex and species
penguins_long_species_island <- penguins_long |>
mutate(species_island=as.factor(paste0(species, " ", island)), .before=Variable) |>
select(!species & !island) |>
filter(!is.na(Value))
#verify this did what I want
head(penguins_long_species_island)
#plot the violin plot
ggplot(
data=penguins_long_species_island,
mapping=aes(x=species_island, y=Value, fill=Variable)
) + geom_violin() + theme(
legend.text = element_text(size = 14),
axis.title = element_text(size = 20,face="bold"),
axis.text = element_text(size = 18),
axis.text.x = element_text(angle = 90)
)
